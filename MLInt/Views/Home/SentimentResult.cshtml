@model MLInt.Models.CombinedResultViewModel

@if (Model.TextSummary != null)
{
    <h2>Summary of your text:</h2>
    <p>@(Model.TextSummary.Summary)</p>

    <a href="@Url.Action("DownloadSummary", "Home")" class="btn btn-primary">Download Summary</a>

}else{
    
    <h2>Sentiment Analysis Result</h2>
    @if (Model.SentimentResult != null || Model.UserOutput != null)
    {
        <ul>
            <li>Positive Score: @(Model.SentimentResult != null ? Model.SentimentResult.PositiveScore.ToString("F2") + "%" : (Model.UserOutput.PositiveProbability * 100).ToString("F2") + "%")</li>
            <li>Negative Score: @(Model.SentimentResult != null ? Model.SentimentResult.NegativeScore.ToString("F2") + "%" : (Model.UserOutput.NegativeProbability * 100).ToString("F2") + "%")</li>
            <li>Neutral Score: @(Model.SentimentResult != null ? Model.SentimentResult.NeutralScore.ToString("F2") + "%" : (Model.UserOutput.NeutralProbability * 100).ToString("F2") + "%")</li>
            <li>Compound Score: @(Model.SentimentResult?.CompoundScore.ToString("F2") ?? Model.UserOutput.CompoundScore.ToString("F2"))</li>
        </ul>

        <a href="@Url.Action("DownloadCsv", "Home")" class="btn btn-primary">Download Results as CSV</a>

        <canvas id="sentimentPieChart" width="300" height="300"></canvas>

    }

    else
    {
        <p>No result to display.</p>
    }

    <!-- Including Chart.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        const positiveScore = @(Model.SentimentResult?.PositiveScore ?? Model.UserOutput.PositiveProbability * 100);
        const negativeScore = @(Model.SentimentResult?.NegativeScore ?? Model.UserOutput.NegativeProbability * 100);
        const neutralScore = @(Model.SentimentResult?.NeutralScore ?? Model.UserOutput.NeutralProbability * 100);

        function initializeSentimentPieChart() {
            const ctx = document.getElementById('sentimentPieChart').getContext('2d');
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Positive', 'Negative', 'Neutral'],
                    datasets: [{
                        label: 'Sentiment Scores',
                        data: [positiveScore, negativeScore, neutralScore],
                        backgroundColor: [
                            'rgba(75, 192, 192, 0.2)', // Green 
                            'rgba(255, 99, 132, 0.2)', // Red 
                            'rgba(255, 206, 86, 0.2)'  // Yellow 
                        ],
                        borderColor: [
                            'rgba(75, 192, 192, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 206, 86, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                        },
                        tooltip: {
                            enabled: true,
                        }
                    }
                }
            });
        }

        if (positiveScore != null && negativeScore != null && neutralScore != null) {
            initializeSentimentPieChart();
        }
    </script>

    <style>
        #sentimentPieChart {
            max-width: 300px; 
            max-height: 300px; 
        }
    </style>


}
 <a href="@Url.Action("Index")">Upload another file</a>

